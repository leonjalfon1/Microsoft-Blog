<?xml version="1.0" encoding="utf-8"?>
<AggregatorConfiguration>
    
	<!-- Configuration -->
    <runtime debug="false">
        <rateLimiting interval="00:00:01.00" changes="1" />
        <logging level="Normal" />
        <script language="C#" />
        <authentication autoImpersonate="false" />
    </runtime>
   
	<!--Rules-FirstPolicy-->	
    <rule name="AutoCommittedByChildren" appliesTo="Task" >
		<![CDATA[
			if (new[] {"In Progress"}.Contains((string)self["System.State"]))
			{
				if(self.HasParent() && ((string)self.Parent["System.State"]) != "Committed")
				{
					self.Parent.TransitionToState("Committed", "Updated Automatically By TFS Aggregator");
				}
			}      
		]]>
	</rule>	
	<rule name="AutoDoneByChildren" appliesTo="Task">
		<![CDATA[
			if ((string)self["System.State"] == "Done" && self.HasParent() && ((string)self.Parent["System.State"]) != "Done")
			{
				if (self.Parent.Children.All(child => new[] {"Removed", "Done"}.Contains((string)child["System.State"])))
				{
					self.Parent.TransitionToState("Done", "Updated Automatically By TFS Aggregator");
				}
			}
		]]>
	</rule>
	<rule name="CalculatedEstimatedWorkField" appliesTo="Task" >
		<![CDATA[
			self["Custom.EstimatedWork"] = (double)self["Custom.EstimatedDevWork"] + (double)self["Custom.EstimatedTestWork"];
		]]>
	</rule>
	
	<!--Rules-SecondPolicy-->	
	<rule name="CreateAutomaticTasksForPBI" appliesTo="Product Backlog Item" >
		<![CDATA[
			if ((string)self["System.State"] == "New" && ((int)self["System.Rev"]) == 1) 
			{
				if(!self.HasChildren()) 
				{
					var child = store.MakeNewWorkItem((string)self["System.TeamProject"], "Task");
					child["Title"] = self["Title"];
					child["System.IterationPath"] = self["System.IterationPath"];
					child["System.AreaPath"] = self["System.AreaPath"];
					child.AddWorkItemLink(self, WorkItemImplementationBase.ParentRelationship);
				}
			}
		]]>
	</rule>
	<rule name="CalculateByChlidrenEstimatedWork" appliesTo="Task">
		<![CDATA[
			if (self.HasParent())
			{
				var parent = self.Parent;
				parent["Custom.EstimatedWork"] = parent.Children.Sum(task => task.GetField<double>("Custom.EstimatedWork", 0d));
			}
		]]>
	</rule>
	<rule name="UpdateAreaAndIterationByParentChanges" appliesTo="Product Backlog Item" >
		<![CDATA[
			if(self.HasChildren()) 
			{
				foreach (var child in self.Children) 
				{
					if (((string)self["System.IterationPath"]) != ((string)self.LastRevision.Fields["System.IterationPath"].OriginalValue))
					{
						child["System.IterationPath"] = self["System.IterationPath"];
					}				
					if (((string)self["System.AreaPath"]) != ((string)self.LastRevision.Fields["System.AreaPath"].OriginalValue))
					{
						child["System.AreaPath"] = self["System.AreaPath"];
					}
				}					
			}      
		]]>
	</rule>	
	<rule name="AggregateParentRemainingWork" appliesTo="Task" >
		<![CDATA[
			double delta = (double)(self["Custom.PreviousRemainingWork"]??0d) - (double)(self["Microsoft.VSTS.Scheduling.RemainingWork"]??0d);
			self.Parent["Microsoft.VSTS.Scheduling.RemainingWork"] = (double)(self.Parent["Microsoft.VSTS.Scheduling.RemainingWork"]??0d) + delta;
			self["Custom.PreviousRemainingWork"] = (double)(self["Microsoft.VSTS.Scheduling.RemainingWork"]??0d);
		]]>
	</rule>	
	
	<!-- Policies -->
    <policy name="FirstPolicyName">
	
	    <!-- Scope -->
        <collectionScope collections="TfsCollectionName" />
        <projectScope projects="TfsTeamProjectName" />
        
        <!-- Rules -->
        <ruleRef name="AutoCommittedByChildren" />
		<ruleRef name="AutoDoneByChildren" />
		<ruleRef name="CalculatedEstimatedWorkField" />
        
    </policy>	
	<policy name="SecondPolicyName">

	    <!-- Scope -->
        <collectionScope collections="TfsCollectionName" />
        <projectScope projects="TfsTeamProjectName" />
        
        <!-- Rules -->
        <ruleRef name="CreateAutomaticTasksForPBI" />
		<ruleRef name="CalculateByChlidrenEstimatedWork" />
		<ruleRef name="UpdateAreaAndIterationByParentChanges" />
		<ruleRef name="AggregateParentRemainingWork" />
        
    </policy>
    
</AggregatorConfiguration>
